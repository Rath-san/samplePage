(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["profile"],{

/***/ "../../src/mvfx_frontend/public/profile/avatar_upload_form.js":
/*!************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/avatar_upload_form.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.AvatarUploadForm = AvatarUploadForm;\n/**\n * AVATAR UPLOAD FORM\n * ==================\n * Manages avatar form submit and validation errors.\n */\n\n/* istanbul ignore next */\n$(document).ready(function () {\n    AvatarUploadForm();\n});\n\nfunction AvatarUploadForm() {\n    var $avatarUploadForm = $('#avatarForm');\n    var $errorContainer = $('.avatar-errors'); // Container for avatar image validation errors.\n    var fileTooLargeMsg = $avatarUploadForm.data('fileTooLargeMsg'); // Get translated \"file too large\" error message.\n    var uiBlocker = $('body').data('motionvfx.uiBlocker'); // Get already present on the page ui-blocker.\n\n    $('[name=avatar]').on('change', function (e) {\n        return processFile(e.target);\n    }); // Validate and submit the file on each file select.\n\n    /**\n     * Clears old and displays new avatar errors.\n     * @param {String} msg - error message.\n     */\n    function displayErrors(msg) {\n        $errorContainer.html('');\n        $errorContainer.append('<li>' + msg + '</li>');\n        $errorContainer.removeClass('d-none');\n    }\n\n    /**\n     * Validates and starts form submit process if file is valid.\n     * @param {Object} avatarField - Avatar file input from element.\n     */\n    function processFile(avatarField) {\n        var $avatarField = $(avatarField);\n\n        // Display error if file size is above 100KB.\n        if ($avatarField[0].files[0].size > 102400) {\n            displayErrors(fileTooLargeMsg);\n            $avatarField.val(\"\");\n            return;\n        }\n\n        submitForm(); // File has passed the validation, submit the form.\n    }\n\n    /**\n     * POST form data to API.     \n     */\n    function submitForm() {\n        var formData = new FormData($avatarUploadForm[0]); // Get avatar image form data.\n\n        uiBlocker.start();\n\n        $.ajax({\n            url: $avatarUploadForm[0].action,\n            type: 'POST',\n            data: formData,\n            processData: false, // Don't process the files.\n            contentType: false // jQuery defaults to application/x-www-form-urlencoded and multipart/form-data does not work.        \n        }).done(function () {\n            return window.location.reload();\n        }) // Reload the page as soon as upload is complete.\n        .fail(function (errorResponse) {\n            uiBlocker.stop();\n\n            displayErrors(errorResponse.responseJSON.avatar);\n        });\n    }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\")))\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/avatar_upload_form.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/profile/change_password_form.js":
/*!**************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/change_password_form.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ChangePasswordForm = ChangePasswordForm;\n\nvar _jquery = __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _edit_icon_toggler = __webpack_require__(/*! ./edit_icon_toggler */ \"../../src/mvfx_frontend/public/profile/edit_icon_toggler.js\");\n\nvar _form_utils = __webpack_require__(/*! ../shared/form_utils/form_utils */ \"../../src/mvfx_frontend/public/shared/form_utils/form_utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * CHANGE PASSWORD FORM\n * ====================\n * Manages password change form submit and validation errors.\n */\n\n/* istanbul ignore next */\n(0, _jquery2.default)(document).ready(function () {\n    ChangePasswordForm();\n});\n\nfunction ChangePasswordForm() {\n    var $changePasswordForm = (0, _jquery2.default)('#changePasswordForm');\n    var $dummyForm = (0, _jquery2.default)('#dummyPassword');\n    var $profileEditModeTrigger = (0, _jquery2.default)('#passwordEditModeBtn'); // Element that switches between profile form modes - edit/readonly.\n    var editIconToggler = (0, _edit_icon_toggler.EditIconToggler)($profileEditModeTrigger, $dummyForm); // Form edit icon swapping.\n    var uiBlocker = (0, _jquery2.default)('body').data('motionvfx.uiBlocker'); // Get already present on the page ui-blocker.\n\n    // Init form mode switching\n    var formModeToggler = Object.create(_form_utils.editModeToggler);\n    formModeToggler.init($changePasswordForm);\n\n    // Form submit event handler.\n    $changePasswordForm.on('submit', function (event) {\n        event.preventDefault();\n        submitForm((0, _jquery2.default)(event.target).serializeArray()); // Get form data and serialize to an array on names and values.\n    });\n\n    // Profile mode switch trigger event handler.\n    $profileEditModeTrigger.on('click', function (e) {\n        formModeToggler.toggle(); // Change form mode - edit/readonly.\n        editIconToggler.toggle(); // Swap form mode toggler icons - close/pen.\n        toggleDummyForm(); // Show/hide dummy password change form.\n    });\n\n    /**\n     * POST form data to API.\n     * @param {Object[]} formFields - array of names and values of profile form elements.\n     * @param {String} formFields[].name - Form field name.\n     * @param {String} formFields[].value - Form field value.\n     */\n    function submitForm(formFields) {\n\n        uiBlocker.start();\n\n        _jquery2.default.post($changePasswordForm[0].action, formFields).done(function () {\n            formModeToggler.toggle(); // Switch the form back to readonly mode.\n            editIconToggler.toggle(); // Change the trigger icon to 'pen'.\n            toggleDummyForm(); // Swith the form back to 'dummy' mode.\n            // mInstaller action for desktop application\n            window.location.href = 'minstaller://action=resetPass'; // mInstaller action for desktop application\n        }).fail(function (errorResponse) {\n            (0, _form_utils.errorDisplay)($changePasswordForm, errorResponse.responseJSON); // Display server errors.\n        }).always(function () {\n            return uiBlocker.stop();\n        });\n    }\n\n    /**\n     * Switch form view between dummy password and change password fields.\n     * Dummy form contains only one password field with an example password used only for presentation purposes.\n     */\n    function toggleDummyForm() {\n\n        if ($changePasswordForm.hasClass('edit-mode')) {\n            $dummyForm.addClass('d-none');\n            $changePasswordForm.removeClass('d-none');\n            $changePasswordForm.find(':input [name=\"current_password\"]').focus();\n        } else {\n            $dummyForm.removeClass('d-none');\n            $changePasswordForm.addClass('d-none');\n        }\n    }\n}\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/change_password_form.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/profile/edit_icon_toggler.js":
/*!***********************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/edit_icon_toggler.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.EditIconToggler = EditIconToggler;\n/**\n * PROFILE VIEW EDIT ICON TOGGLER\n * ==============================\n * Toggles between pen and close icon on click, and shakes the pen on selected element click.\n */\n\n/**\n * Init.\n * @param {String} iconContainer - jquery selector for container with pen and close elements marked by .icon-close and .icon-pen classes.\n * @param {String} shakeTriggerElement - jquery selector for element that should trigger pen shake animation on click.\n */\nfunction EditIconToggler(iconContainer, shakeTriggerElement) {\n    var $iconContainer = $(iconContainer);\n    var $closeIcon = $iconContainer.find('.icon-close');\n    var $penIcon = $iconContainer.find('.icon-pen');\n    var $shakeTrigger = $(shakeTriggerElement);\n\n    // Animate pen shake when clicked on share trigger \n    $shakeTrigger.on('click', function () {\n        $('html,body').animate({ scrollTop: $penIcon.offset().top - 80 }, 'fast'); // Scroll to the icon to make sure it is visible.\n\n        // Reset the animation each time the element is clicked.\n        $penIcon.removeClass('shake');\n        void $shakeTrigger[0].offsetWidth; // The animation will fire only once without this line. Explanation: https://www.reddit.com/r/learnjavascript/comments/782qdx/what_does_void_elementoffsetwidth_do/\n        $penIcon.addClass('shake');\n    });\n\n    // Expose public functions.\n    return {\n        toggle: toggle\n    };\n\n    /**\n     * Show/remove close/pen icons.\n     */\n    function toggle() {\n        $penIcon.add($closeIcon).toggleClass('d-none');\n\n        if ($penIcon.hasClass('d-none')) {\n            $penIcon.removeClass('shake'); // Not removing shake class will fire the animation on next pen icon display.\n        }\n    }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\")))\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/edit_icon_toggler.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/profile/index.js":
/*!***********************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(/*! ../shared/ui_blocker/ui_blocker */ \"../../src/mvfx_frontend/public/shared/ui_blocker/ui_blocker.js\");\n\n__webpack_require__(/*! ./avatar_upload_form */ \"../../src/mvfx_frontend/public/profile/avatar_upload_form.js\");\n\n__webpack_require__(/*! ./change_password_form */ \"../../src/mvfx_frontend/public/profile/change_password_form.js\");\n\n__webpack_require__(/*! ./profile_details_form */ \"../../src/mvfx_frontend/public/profile/profile_details_form.js\");\n\n__webpack_require__(/*! ./software_form */ \"../../src/mvfx_frontend/public/profile/software_form.js\");\n\n__webpack_require__(/*! ./two_step_auth_form */ \"../../src/mvfx_frontend/public/profile/two_step_auth_form.js\");\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/index.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/profile/profile_details_form.js":
/*!**************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/profile_details_form.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.ProfileDetailsForm = ProfileDetailsForm;\n\nvar _jquery = __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _edit_icon_toggler = __webpack_require__(/*! ./edit_icon_toggler */ \"../../src/mvfx_frontend/public/profile/edit_icon_toggler.js\");\n\nvar _form_utils = __webpack_require__(/*! ../shared/form_utils/form_utils */ \"../../src/mvfx_frontend/public/shared/form_utils/form_utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * PROFILE DETAILS FORM\n * ====================\n * Manages profile details form submit and validation errors.\n */\n\n/* istanbul ignore next */\n(0, _jquery2.default)(document).ready(function () {\n    ProfileDetailsForm();\n});\n\nfunction ProfileDetailsForm() {\n    var $profileDetailsForm = (0, _jquery2.default)('#profileDetailsForm');\n    var $profileEditModeTrigger = (0, _jquery2.default)('#profileEditModeBtn'); // Element that switches between profile form modes - edit/readonly.\n    var uiBlocker = (0, _jquery2.default)('body.ui-blocker').data('motionvfx.uiBlocker'); // Get already present on the page ui-blocker.\n\n    // Init form mode switching.\n    var formModeToggler = Object.create(_form_utils.editModeToggler);\n    formModeToggler.init($profileDetailsForm);\n\n    var editIconToggler = (0, _edit_icon_toggler.EditIconToggler)($profileEditModeTrigger, '.form-overlay'); // Form edit icon swapping, called after formModeToggler added .form-overlay element to the page.\n\n    // Form submit event handler.\n    $profileDetailsForm.on('submit', function (event) {\n        event.preventDefault();\n        submitForm((0, _jquery2.default)(event.target).serializeArray()); // Get form data and serialize to an array on names and values.        \n    });\n\n    // Profile mode switch trigger event handler.\n    $profileEditModeTrigger.on('click', function (e) {\n        formModeToggler.toggle(); // Change form mode - edit/readonly.\n        editIconToggler.toggle(); // Swap form mode toggler icons - close/pen.\n    });\n\n    /**\n     * POST form data to API.\n     * @param {Object[]} formFields - array of names and values of profile form elements.\n     * @param {String} formFields[].name - Form field name.\n     * @param {String} formFields[].value - Form field value.\n     */\n    function submitForm(formFields) {\n\n        uiBlocker.start();\n\n        _jquery2.default.post($profileDetailsForm[0].action, formFields).done(function () {\n            (0, _form_utils.setDefaultValues)($profileDetailsForm); // Set submited values as default, to prevent revert to old values on form mode switch.                \n            formModeToggler.toggle(); // Switch the form back to readonly mode.\n            editIconToggler.toggle(); // Change the trigger icon to 'pen'.\n        }).fail(function (errorResponse) {\n            (0, _form_utils.errorDisplay)($profileDetailsForm, errorResponse.responseJSON); // Display server errors.\n        }).always(function () {\n            return uiBlocker.stop();\n        });\n    }\n}\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/profile_details_form.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/profile/software_form.js":
/*!*******************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/software_form.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.SoftwareSelectForm = SoftwareSelectForm;\n/**\n * SOFTWARE SELECT FORM\n * ====================\n * Manages profile software select form submit and validation errors.\n */\n\n$(document).ready(function () {\n    SoftwareSelectForm();\n});\n\nfunction SoftwareSelectForm() {\n    var $softwareForm = $('#softwareSelectForm');\n\n    // Automatically submit software form on each software select.\n    $('[name=\"software\"]').on('change', function () {\n        return $softwareForm.submit();\n    });\n\n    // Form submit event handler.\n    $softwareForm.on('submit', function (event) {\n        event.preventDefault();\n\n        submitForm($(event.target).serializeArray()); // Get form data and serialize to an array on names and values.     \n    });\n\n    /**\n     * POST form data to API.\n     * @param {Object[]} formFields - array of names and values of profile form elements.\n     * @param {String} formFields[].name - Form field name.\n     * @param {String} formFields[].value - Form field value.\n     */\n    function submitForm(formFields) {\n        $.post($softwareForm[0].action, formFields).fail(function () {\n            return $softwareForm[0].reset();\n        }); // Revert the form to state before the submit.\n    }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\")))\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/software_form.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/profile/two_step_auth_form.js":
/*!************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/profile/two_step_auth_form.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.TwoStepAuthForm = TwoStepAuthForm;\n/**\n * TWO STEP AUTH FORM\n * ====================\n * Manages on/off two step authentication.\n */\n\n$(document).ready(function () {\n    TwoStepAuthForm();\n});\n\nfunction TwoStepAuthForm() {\n    var $twoStepForm = $('#twoStepForm');\n\n    // Automatically submit software form on each software select.\n    $('[name=\"two_step_auth\"]').on('change', function () {\n        return $twoStepForm.submit();\n    });\n\n    // Form submit event handler.\n    $twoStepForm.on('submit', function (event) {\n        event.preventDefault();\n\n        submitForm($(event.target).serializeArray()); // Get form data and serialize to an array on names and values.\n    });\n\n    /**\n     * POST form data to API.\n     * @param {Object[]} formFields - array of names and values of profile form elements.\n     * @param {String} formFields[].name - Form field name.\n     * @param {String} formFields[].value - Form field value.\n     */\n    function submitForm(formFields) {\n        $.post($twoStepForm[0].action, formFields).fail(function () {\n            return $twoStepForm[0].reset();\n        }); // Revert the form to state before the submit.\n    }\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\")))\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/profile/two_step_auth_form.js?");

/***/ })

},[["../../src/mvfx_frontend/public/profile/index.js","runtime","commons"]]]);