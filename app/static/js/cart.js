(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["cart"],{

/***/ "../../../../node_modules/css-element-queries/src/ResizeSensor.js":
/*!*************************************************************!*\
  !*** /node_modules/css-element-queries/src/ResizeSensor.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(typeof window !== 'undefined' ? window : this, function () {\n\n    // Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (fn) {\n            return window.setTimeout(fn, 20);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n    * Get element size\n    * @param {HTMLElement} element\n    * @returns {Object} {width, height}\n    */\n    function getElementSize(element) {\n        if (!element.getBoundingClientRect) {\n            return {\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            }\n        }\n\n        var rect = element.getBoundingClientRect();\n        return {\n            width: Math.round(rect.width),\n            height: Math.round(rect.height)\n        }\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function(sizeInfo) {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call(this, sizeInfo);\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            };\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element) return;\n            if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizedAttached = new EventQueue();\n            element.resizedAttached.add(resized);\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.dir = 'ltr';\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'pointer-events: none; position: absolute; left: 0px; top: 0px; right: 0; bottom: 0; ' +\n                'overflow: hidden; z-index: -1; visibility: hidden; max-width: 100%;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            var computedStyle = window.getComputedStyle(element);\n            var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\n            if ('absolute' !== position && 'relative' !== position && 'fixed' !== position) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var dirty, rafId;\n            var size = getElementSize(element);\n            var lastWidth = size.width;\n            var lastHeight = size.height;\n            var initialHiddenCheck = true;\n            var lastAnimationFrame = 0;\n\n            var resetExpandShrink = function () {\n                var width = element.offsetWidth;\n                var height = element.offsetHeight;\n\n                expandChild.style.width = (width + 10) + 'px';\n                expandChild.style.height = (height + 10) + 'px';\n\n                expand.scrollLeft = width + 10;\n                expand.scrollTop = height + 10;\n\n                shrink.scrollLeft = width + 10;\n                shrink.scrollTop = height + 10;\n            };\n\n            var reset = function() {\n                // Check if element is hidden\n                if (initialHiddenCheck) {\n                    var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\n                    if (invisible) {\n                        // Check in next frame\n                        if (!lastAnimationFrame){\n                            lastAnimationFrame = requestAnimationFrame(function(){\n                                lastAnimationFrame = 0;\n\n                                reset();\n                            });\n                        }\n\n                        return;\n                    } else {\n                        // Stop checking\n                        initialHiddenCheck = false;\n                    }\n                }\n\n                resetExpandShrink();\n            };\n            element.resizeSensor.resetSensor = reset;\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = size.width;\n                lastHeight = size.height;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call(size);\n                }\n            };\n\n            var onScroll = function() {\n                size = getElementSize(element);\n                dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n\n            // Fix for custom Elements\n            requestAnimationFrame(reset);\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            ResizeSensor.detach(element, ev);\n        };\n\n        this.reset = function() {\n            element.resizeSensor.resetSensor();\n        };\n    };\n\n    ResizeSensor.reset = function(element) {\n        forEachElement(element, function(elem){\n            elem.resizeSensor.resetSensor();\n        });\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if (!elem) return;\n            if(elem.resizedAttached && typeof ev === \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    if (typeof MutationObserver !== \"undefined\") {\n        var observer = new MutationObserver(function (mutations) {\n            for (var i in mutations) {\n                if (mutations.hasOwnProperty(i)) {\n                    var items = mutations[i].addedNodes;\n                    for (var j = 0; j < items.length; j++) {\n                        if (items[j].resizeSensor) {\n                            ResizeSensor.reset(items[j]);\n                        }\n                    }\n                }\n            }\n        });\n\n        document.addEventListener(\"DOMContentLoaded\", function (event) {\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        });\n    }\n\n    return ResizeSensor;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\")))\n\n//# sourceURL=webpack:////node_modules/css-element-queries/src/ResizeSensor.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/cart/cart.js":
/*!*******************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/cart/cart.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.cartInit = cartInit;\n\nvar _jquery = __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _ResizeSensor = __webpack_require__(/*! css-element-queries/src/ResizeSensor */ \"../../../../node_modules/css-element-queries/src/ResizeSensor.js\");\n\nvar _ResizeSensor2 = _interopRequireDefault(_ResizeSensor);\n\nvar _helper_utils = __webpack_require__(/*! ../../shared/helper_utils/helper_utils */ \"../../src/mvfx_frontend/shared/helper_utils/helper_utils.js\");\n\nvar _form_utils = __webpack_require__(/*! ../shared/form_utils/form_utils */ \"../../src/mvfx_frontend/public/shared/form_utils/form_utils.js\");\n\nvar _cart_utils = __webpack_require__(/*! ../shared/cart_utils/cart_utils */ \"../../src/mvfx_frontend/public/shared/cart_utils/cart_utils.js\");\n\nvar _cart_product_suggestions = __webpack_require__(/*! ./cart_product_suggestions */ \"../../src/mvfx_frontend/public/cart/cart_product_suggestions.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * MAIN CART VIEW\n * ==============\n * Allows for managing cart contents displaying available discounts and starting order placement process.\n */\n\n/* istanbul ignore next */\n(0, _jquery2.default)(document).ready(function () {\n    cartInit();\n});\n\nvar $cartContainer = void 0; // Contains products list.\nvar $cartForm = void 0;\nvar $mCreditsField = void 0;\nvar $promoCodeField = void 0;\nvar $promoCodeForm = void 0;\nvar $promoCodeSubmitBtn = void 0;\nvar blockerInstance = void 0;\nvar cartState = {};\nvar previousPromoCode = '';\nvar markBundlesDebounced = (0, _helper_utils.debounce)(_cart_utils.markBundles, 100);\n\nfunction cartInit() {\n    $cartContainer = (0, _jquery2.default)('#cartContainer');\n    $cartForm = (0, _jquery2.default)('#cartForm');\n    $mCreditsField = (0, _jquery2.default)('[name=\"mcredits\"]');\n    $promoCodeField = (0, _jquery2.default)('.promo-code-field');\n    $promoCodeForm = (0, _jquery2.default)('#promoCodeForm');\n    $promoCodeSubmitBtn = (0, _jquery2.default)('#promoCodeSubmitBtn');\n    blockerInstance = (0, _jquery2.default)('body').data('motionvfx.uiBlocker'); // Fetch UI blocker instance.\n    cartState = (0, _jquery2.default)('[data-cart-state]').data('cartState'); // Fetch initial cart state provided by backend from HTML.\n    previousPromoCode = $promoCodeField.val();\n\n    // Cart submit event handler.\n    $cartForm.on('submit', function (e) {\n        e.preventDefault();\n        submitCartForm();\n    });\n\n    // Update product list on cart refresh events emitted from cart_utils module.\n    (0, _jquery2.default)(document).on('mvfx:cartRefreshed', function (e) {\n        cartState = e.cartState;\n        updateCartView();\n        (0, _cart_product_suggestions.suggestionsDisplay)(cartState); // Check if there are new discount suggestions.\n    });\n\n    // Submit promo code on input leave.\n    $promoCodeField.on('blur', function (e) {\n        var code = $promoCodeField.val();\n\n        // Submit the form only when new promo code was inputed in the field.\n        if (previousPromoCode !== code) {\n            previousPromoCode = code;\n            $promoCodeField.submit();\n        }\n    });\n\n    // Promo code form submit event listener.\n    $promoCodeForm.on('submit', function (e) {\n        e.preventDefault();\n\n        submitPromoCodeForm();\n    });\n\n    // Promo code form submit handler.\n    $promoCodeSubmitBtn.on('click', function (e) {\n        if ((0, _jquery2.default)(e.target).hasClass('arrow-icon')) {\n            // For some reason the arrow disappears when clicked and there is no timeout set.\n            setTimeout(function () {\n                return requestAnimationFrame(function () {\n                    $promoCodeField.focus();\n                });\n            }, 75);\n            return;\n        }\n\n        submitPromoCodeForm();\n    });\n\n    // Handle product remove button click.\n    (0, _jquery2.default)('.product-remove-btn').on('click', function (e) {\n        var productId = (0, _jquery2.default)(e.target).closest('[data-product-id]').data('productId');\n\n        blockerInstance.start();\n\n        (0, _cart_utils.removeCartProduct)(productId).always(function () {\n            return blockerInstance.stop();\n        });\n    });\n\n    $cartContainer.find('[data-toggle=\"tooltip\"]').tooltip({ container: $cartContainer }); // Init all cart tooltips.\n\n    $mCreditsField.on('change', function (e) {\n        return mCreditsToggle((0, _jquery2.default)(e.currentTarget));\n    });\n\n    (0, _jquery2.default)('[name=\"terms\"]').on('change', function (e) {\n        return (0, _jquery2.default)(e.target).closest('.error').removeClass('error');\n    }); // Remove error class when user clicks on \"I accept conditions\" checkbox, marking it as valid.\n\n    // Update bundle markers and tooltips every time the cart container element dimensions change (ex. on window resize, on product remove, on cart update etc...)\n    new _ResizeSensor2.default($cartContainer[0], function () {\n        return markBundlesDebounced(cartState, $cartContainer, '.product-name-td');\n    });\n\n    markBundlesDebounced(cartState, $cartContainer, '.product-name-td'); // Initial bundle marking.\n\n    if (cartState.items && cartState.items.length > 0) {\n        (0, _cart_product_suggestions.cartProductSuggestionsInit)(cartState);\n\n        setTimeout(function () {\n            return (0, _cart_product_suggestions.suggestionsDisplay)(cartState);\n        }, 1500); // Displays initial discounts and similar products propositions with a slight delay.\n    }\n\n    // Expose fastSpring callbacks as global functions, used in fastSpring script tag in cart html.\n    window.fastSpringErrorCallback = fastSpringErrorCallback;\n    window.fastSpringPopupCloseCallback = fastSpringPopupCloseCallback;\n}\n\n/////////////////////// Private Functions ///////////////////////////\n\n/**\n * Display error modal when there is a problem with fastSpring backend communication.\n */\nfunction fastSpringErrorCallback() {\n    (0, _jquery2.default)('#somethingWentWrongModal').modal('show');\n}\n\n/**\n * Called when fastSpring payment iframe is closed. Returns order data when the transaction is finished, and null when modal was closed before transaction finish.\n * @param {object} orderData \n */\nfunction fastSpringPopupCloseCallback(orderData) {\n    if (orderData === null) {\n        return;\n    } // User dismissed fastSpring modal, do nothing.\n\n    var formData = [];\n\n    formData.push({ name: 'id', value: orderData.id });\n    formData.push({ name: 'reference', value: orderData.reference });\n    formData.push({ name: 'csrfmiddlewaretoken', value: (0, _helper_utils.getCookie)('csrftoken') });\n\n    blockerInstance.start();\n\n    _jquery2.default.post('/fastspring-verify-order', formData).done(function (response) {\n        if (response.redirect_to) {\n            window.location.href = response.redirect_to;\n        } else {\n            blockerInstance.stop();\n        }\n    }).fail(function () {\n        return blockerInstance.stop();\n    });\n}\n\n/**\n * Generic info modal that takes costom modal titles and messages.\n * @param {string} title\n * @param {string} message\n */\nfunction infoModal(title, message) {\n    var $cartInfoModal = (0, _jquery2.default)('#cartInfoModal');\n    $cartInfoModal.find('.modal-title').text(title);\n    $cartInfoModal.find('.modal-body').text(message);\n\n    $cartInfoModal.modal('show');\n}\n\n/**\n * Sends request for calculating a new price taking into account mcredits.\n */\nfunction mCreditsToggle($mCreditsField) {\n    blockerInstance.start();\n\n    _jquery2.default.post('cart/mcredits', { csrfmiddlewaretoken: (0, _helper_utils.getCookie)('csrftoken'), mcredits: $mCreditsField[0].checked }).done(function (response) {\n        cartState = response;\n        updateCartView();\n\n        var $usedMcredits = (0, _jquery2.default)('#usedMcredits');\n\n        if ($mCreditsField[0].checked) {\n            $usedMcredits.removeClass('d-none');\n        } else {\n            $usedMcredits.addClass('d-none');\n        }\n    }).always(function () {\n        return blockerInstance.stop();\n    });\n}\n\n/**\n * Reflect cart state data onto the cart view. \n */\nfunction updateCartView() {\n\n    // Loop over rendered products and remove those that are not present in cart state data. \n    // It has to be done this way as sometimes removing product will also remove other dependent products along with it.\n    $cartContainer.find('[data-product-id]').each(function (index, product) {\n        if (!cartState.items.find(function (item) {\n            return item.id === (0, _jquery2.default)(product).data('productId').toString();\n        })) {\n            (0, _jquery2.default)(product).remove();\n        }\n    });\n\n    // Hide cart contents if empty. Does not check cartState.item_count as some products might have been added to cart in another tab \n    // and will not show up in the currently viewed cart view. Removing the product then will leave an empty table. \n    if ($cartContainer.find('[data-product-id]').length === 0) {\n        $cartContainer.add('#cartSummary').add('#cartStepper').addClass('d-none'); // Hide cart contents and cart price summary.        \n        (0, _jquery2.default)('#emptyListMsg').removeClass('d-none'); // Show 'The cart is empty' msg.\n        (0, _jquery2.default)('.suggestion-box').addClass('d-none'); // Hide suggestion box.\n        return;\n    }\n\n    // Change products order in case it was changed by the API ex. during product remove.\n    reorderProducts(cartState.items);\n\n    // Update product prices.\n    _jquery2.default.each(cartState.items, function (index, item) {\n        var $itemPriceEl = (0, _jquery2.default)('[data-product-id=' + item.id + '] .cart-item-price');\n\n        // Discounted products have a special template.\n        if (item.discount.id || item.bundle_discount) {\n            var title = '';\n\n            if (item.bundle_discount) {\n                title += item.bundle_discount_info + '<br />';\n            }\n\n            if (item.discount.id) {\n                title += item.discount.description;\n            }\n\n            $itemPriceEl.html('').html('\\n                    <span class=\"discount\" data-toggle=\"tooltip\" data-html=\"true\" data-placement=\"top\" title=\"' + title + '\">\\n                        <span>$' + item.base_subtotal + '</span><br />\\n                        <span>$' + item.subtotal + '</span>\\n                    </span>\\n                ');\n        } else {\n            $itemPriceEl.html('').html('<span>$' + item.subtotal + '</span>');\n        }\n\n        if (item.bundle && cartState.discount_code_bundle_off) {\n            $itemPriceEl.prepend('<img class=\"cart-info-icon bundle-code-info\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"This product is not subject to any discounts\" src=\"/static/svg/warning-icon-gray.svg\" /><br />');\n        }\n    });\n\n    // Update cart total prices.        \n    (0, _jquery2.default)('#totalPrice').text('$' + cartState.total);\n    (0, _jquery2.default)('#subtotalPrice').text('$' + cartState.base_subtotal);\n\n    var $discountSubtotal = (0, _jquery2.default)('#discountSubtotal');\n\n    // Display discount subtotal info.\n    if (parseInt(cartState.discount_subtotal) > 0) {\n        $discountSubtotal.parent().removeClass('d-none');\n        $discountSubtotal.text('$' + cartState.discount_subtotal);\n    } else {\n        $discountSubtotal.parent().addClass('d-none');\n    }\n\n    // Cloned element that will act as a blueprint for newly added vat values.\n    var $vatBlueprint = (0, _jquery2.default)('.vat-summary li').first().clone();\n\n    // Clear old vats.\n    (0, _jquery2.default)('.vat-summary li').remove();\n\n    // Update total vat values.\n    _jquery2.default.each(cartState.vat, function (key, value) {\n        var $vatRow = $vatBlueprint.clone();\n\n        $vatRow.find('.vat-label').text('VAT ' + key + '%:');\n        $vatRow.find('.vat-amount').text('$' + value);\n\n        (0, _jquery2.default)('.vat-summary ul').append($vatRow);\n    });\n\n    // Update used mCredits.\n    if (cartState.mcredits && $mCreditsField[0].checked) {\n        (0, _jquery2.default)('#usedMcredits').find('.quantity').text(cartState.mcredits.used_mcredits);\n    }\n\n    // Re mark bundles.\n    markBundlesDebounced(cartState, $cartContainer, '.product-name-td');\n}\n\n/**\n * Reorders products to match the order returned by the API.\n * Reordering often happens when a product from the bundle is removed.\n * @param {object[]} products \n */\nfunction reorderProducts(products) {\n    var productOrder = products.map(function (item) {\n        return item.id;\n    });\n\n    var newHtml = (0, _jquery2.default)(document.createDocumentFragment());\n\n    _jquery2.default.each(productOrder, function (index, productId) {\n        var $prodEl = (0, _jquery2.default)('#cartContainer [data-product-id=\"' + productId + '\"]');\n        newHtml.append($prodEl);\n    });\n\n    newHtml.prepend((0, _jquery2.default)('.top-empty-row'));\n    newHtml.append((0, _jquery2.default)('.bottom-empty-row'));\n\n    (0, _jquery2.default)('.cart-table-body').html('').append(newHtml);\n}\n\n/**\n * Start order placement of the items placed in the cart.\n */\nfunction submitCartForm() {\n\n    blockerInstance.start();\n\n    _jquery2.default.post($cartForm[0].action, $cartForm.serializeArray()).done(function (response) {\n        try {\n            var _items = [];\n            var discount_code = '';\n\n            if (response.cart.discount_code) {\n                discount_code = response.cart.discount_code;\n            }\n\n            for (var i = 0; i < response.cart.items.length; i++) {\n                var _item = response.cart.items[i];\n                _items.push({\n                    \"id\": '' + _item.id,\n                    \"name\": '' + _item.title,\n                    \"category\": '' + _item.type,\n                    \"quantity\": '' + _item.quantity,\n                    \"price\": '' + _item.subtotal\n                });\n            }\n\n            gtag('event', 'begin_checkout', {\n                \"items\": _items,\n                \"coupon\": '' + discount_code\n            });\n        } catch (e) {}\n\n        try {\n            var _items2 = [];\n            var _items_ids = [];\n\n            for (var i = 0; i < response.cart.items.length; i++) {\n                var _item2 = response.cart.items[i];\n                _items2.push({\n                    \"id\": '' + _item2.id,\n                    \"quantity\": '' + _item2.quantity\n                });\n                _items_ids.push({\n                    \"id\": '' + _item2.id\n                });\n            }\n\n            fbq('track', 'InitiateCheckout', {\n                num_items: response.cart.items.length,\n                contents: _items2,\n                content_ids: _items_ids,\n                currency: 'USD'\n            });\n        } catch (e) {}\n\n        if (response.secure_key) {\n            blockerInstance.stop();\n\n            window.fastspring.builder.reset();\n            window.fastspring.builder.secure(response.secure_data, response.secure_key);\n            window.fastspring.builder.checkout();\n        } else if (response.redirect_to) {\n            // API returns redirect_to when fastSpring is not needed.\n            window.location.href = response.redirect_to;\n        }\n    }).fail(function (errorResponse) {\n        var errors = errorResponse.responseJSON;\n\n        blockerInstance.stop();\n        (0, _form_utils.errorDisplay)($cartForm, errors);\n\n        if (errors && errors.terms) {\n            infoModal('Warning!', 'You must accept our Conditions before being able to place an order.');\n        }\n    });\n}\n\n/**\n * Checks validity of promo code and fetches product with promo code discounts.\n */\nfunction submitPromoCodeForm() {\n    var promoCode = $promoCodeField.val();\n\n    if (promoCode.length === 0) {\n        return;\n    }\n\n    (0, _form_utils.clearErrors)($promoCodeForm);\n\n    blockerInstance.start();\n\n    _jquery2.default.get($promoCodeForm[0].action + '?code=' + promoCode).done(function (response) {\n\n        if (response && response.discount_message) {\n            infoModal('Promo code', response.discount_message);\n        }\n    }).fail(function (errorResponse) {\n        var errors = errorResponse.responseJSON;\n\n        if (errors && errors.promo_code) {\n            infoModal('Promo code', errors.promo_code[0]);\n        }\n\n        $promoCodeField.val('');\n        previousPromoCode = '';\n    }).always(function () {\n        (0, _cart_utils.getCartState)();\n        blockerInstance.stop();\n    });\n}\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/cart/cart.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/cart/cart_product_suggestions.js":
/*!***************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/cart/cart_product_suggestions.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.cartProductSuggestionsInit = cartProductSuggestionsInit;\nexports.suggestionsDisplay = suggestionsDisplay;\n\nvar _jquery = __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _ResizeSensor = __webpack_require__(/*! css-element-queries/src/ResizeSensor */ \"../../../../node_modules/css-element-queries/src/ResizeSensor.js\");\n\nvar _ResizeSensor2 = _interopRequireDefault(_ResizeSensor);\n\nvar _helper_utils = __webpack_require__(/*! ../../shared/helper_utils/helper_utils */ \"../../src/mvfx_frontend/shared/helper_utils/helper_utils.js\");\n\nvar _ui_blocker = __webpack_require__(/*! ../shared/ui_blocker/ui_blocker */ \"../../src/mvfx_frontend/public/shared/ui_blocker/ui_blocker.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * CART PRODUCT SUGGESTIONS\n * ========================\n * Manages display of product discount and similar products suggestions.\n */\n\nvar $quantityDiscountBlock = void 0;\nvar $suggestionBox = void 0;\nvar $suggestionBoxContents = void 0;\nvar $suggestionBoxMoreBtn = void 0;\nvar $suggestionBoxProducts = void 0;\nvar blockerInstance = void 0;\nvar debouncedFitSuggestions = void 0;\nvar mobileViewBreakpoint = 768; // Max width of the mobile view.\nvar oldCartState = void 0; // Used in cart contents change detection.\nvar similarProductsMsg = void 0;\nvar similarProductsTitle = void 0;\nvar suggestionsCount = void 0; // Number of suggested products returned by API.\n\n// Id of the previous discount that have been showed to the user.\n// Used to make sure that the same just dismissed discount will not be showed to the user on cart state update.\nvar shownDiscountId = void 0;\n\nfunction cartProductSuggestionsInit(initialCartState) {\n    $quantityDiscountBlock = (0, _jquery2.default)('.quantity-discount-block');\n    $suggestionBox = (0, _jquery2.default)('.suggestion-box');\n    $suggestionBoxContents = (0, _jquery2.default)('.suggestion-box-contents');\n    $suggestionBoxMoreBtn = (0, _jquery2.default)('.suggestion-box-more-btn');\n    $suggestionBoxProducts = (0, _jquery2.default)('.suggestion-box-products');\n    debouncedFitSuggestions = (0, _helper_utils.debounce)(fitSuggestions, 100);\n    oldCartState = {};\n    shownDiscountId = null;\n    similarProductsMsg = (0, _jquery2.default)('[data-similar-products-msg]').data('similarProductsMsg'); // Fetch translated message.\n    similarProductsTitle = (0, _jquery2.default)('[data-similar-products-title]').data('similarProductsTitle'); // Fetch translated title.\n    suggestionsCount = 0;\n\n    // Ui blocker setup.\n    blockerInstance = Object.create(_ui_blocker.uiBlocker);\n    blockerInstance.init((0, _jquery2.default)('.suggestion-box-contents'), { noOverlay: true });\n\n    $quantityDiscountBlock.find('.dismiss-btn').on('click', function () {\n        return $quantityDiscountBlock.addClass('hide-quantity-discount-block');\n    }); // Quantity discount info block dismiss event handler.\n\n    (0, _jquery2.default)(window).on('resize', function () {\n        return suggestionBoxResize();\n    }); // Adjust the height of suggestion box on window resize.\n\n    (0, _jquery2.default)('.suggestion-box-close').on('click', function () {\n        return $suggestionBox.addClass('hide-suggestion-box');\n    }); // Dismiss mobile suggestion box event handler.\n\n    // Show/hide suggestion box trigger event handler.\n    (0, _jquery2.default)('[data-suggestion-box-toggle]').on('click', function () {\n        if ($suggestionBox.hasClass('hide-suggestion-box')) {\n            openSuggestionBox();\n        } else {\n            closeSuggestionBox();\n        }\n    });\n\n    suggestionBoxResize(); // Initially adjust suggestion box height.\n\n    (0, _jquery2.default)('.suggestion-box-trigger').removeClass('d-none'); // Show suggestion box trigger after the suggestion box resize has been completed.     \n\n    // Do not show suggestion box when user is eligable for qantity discount and is in mobile view.\n    if (initialCartState.suggestions.length === 0 || initialCartState.suggestions[0].type !== \"quantity\") {\n        setTimeout(function () {\n            return $suggestionBox.removeClass('hide-suggestion-box');\n        }, 1500); // Slight delay for initial suggestion box display.        \n    }\n\n    new _ResizeSensor2.default($suggestionBoxContents[0], debouncedFitSuggestions); // Refit suggestions every time the product container dimensions change.\n}\n\n/**\n * Displays available discounts and product suggestions.\n * @param {object} cartState Current cart state.\n */\nfunction suggestionsDisplay() {\n    var cartState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (!cartState.items || cartState.items.length === 0) {\n        return;\n    } // Cart is empty, do nothing.\n\n    var discountSuggestions = cartState.suggestions;\n\n    // Get similar products if there are not discount suggestions or there is a promo code.\n    if (!discountSuggestions || discountSuggestions.length === 0 || discountSuggestions[0].type === \"promo_code\") {\n        // Only fetch new similar products when products were added or removed.\n        // Avoids fetching similar products when for example product quantity has been changed.\n        if (productsChanged(cartState)) {\n            fetchSimilarProducts();\n        }\n        return;\n    }\n\n    var discountSuggestion = discountSuggestions[0]; // Only one discount/suggestion can be displayed at a given time.\n    var title = discountSuggestion.suggestion_title;\n    var numberPosition = title.search(/\\d/); // Determine the position of discount percent value.\n    var titleHtml = title.substr(0, numberPosition) + ' <b> ' + title.substr(numberPosition) + '</b>'; // Put emphasis on the discount.\n\n    // There are two types of discounts: \"Set discounts\" and \"Quantity discounts\".\n    if (discountSuggestion.type === \"product_set\") {\n        // Render discount sets.\n        renderSuggestionBoxContents(discountSuggestion.discount_bundle, discountSuggestion.more_link, titleHtml, discountSuggestion.suggestion_msg);\n\n        $quantityDiscountBlock.addClass('hide-quantity-discount-block'); // Hide quantity discount info box as there can be only one discount suggestion at one time.\n\n        // Open the suggestion box only when the discount was not already dismissed by the user. \n        // This avoids reopening the box with just dismissed discount on cart state update, and ensures that new discount is shown to the user.\n        if (shownDiscountId !== discountSuggestion.discount_id) {\n            openSuggestionBox();\n            shownDiscountId = discountSuggestion.discount_id; // Mark discount as shown.\n        }\n    } else if (discountSuggestion.type === \"quantity\") {\n        (0, _jquery2.default)('.quantity-discount-title').html(titleHtml);\n        (0, _jquery2.default)('.quantity-discount-msg').html(discountSuggestion.suggestion_msg);\n\n        // Only fetch new similar products when products were added or removed.\n        // Avoids fetching similar products when, for example, product quantity has been changed.\n        if (productsChanged(cartState)) {\n            fetchSimilarProducts();\n        }\n\n        // Open the quantity box only when the discount was not already dismissed by the user. \n        // This avoids reopening the box with just dismissed discount on cart state update, and ensures that new discount is shown to the user.\n        if (shownDiscountId !== discountSuggestion.discount_id) {\n            $quantityDiscountBlock.removeClass('hide-quantity-discount-block');\n            shownDiscountId = discountSuggestion.discount_id; // Mark discount as shown.\n        }\n    }\n}\n\n///////////////////// Private Functions ////////////////////////\n\n/**\n * Hides the suggestions box.\n */\nfunction closeSuggestionBox() {\n    $suggestionBox.addClass('hide-suggestion-box');\n}\n\n/**\n * Fetches products that are similar to the ones in the cart.\n */\nfunction fetchSimilarProducts() {\n    blockerInstance.start();\n\n    _jquery2.default.get('/cart/similar?cart=True').done(function (response) {\n        return renderSuggestionBoxContents(response.items, response.more_link, similarProductsTitle, similarProductsMsg);\n    }).always(function () {\n        return blockerInstance.stop();\n    });\n}\n\n/**\n * Hides suggestion previews if they do not fit the enclosing container, and toggles 'More' btn visibility.\n */\nfunction fitSuggestions() {\n    var $productsContainer = (0, _jquery2.default)('.suggestion-box-contents .center-container');\n    var $suggestedProducts = $suggestionBoxProducts.find('.product');\n    var numberOfVisibleProducts = Math.floor(($productsContainer.height() - (0, _jquery2.default)('.suggestion-btn-box').outerHeight()) / $suggestedProducts.outerHeight());\n\n    var suggestionHidden = false;\n\n    for (var i = 0; i < $suggestedProducts.length; i++) {\n        // First suggestion is always visible.\n        if (i === 0 || i < numberOfVisibleProducts) {\n            (0, _jquery2.default)($suggestedProducts[i]).removeClass('d-none');\n        } else {\n            (0, _jquery2.default)($suggestedProducts[i]).addClass('d-none');\n            suggestionHidden = true;\n        }\n    }\n\n    if (suggestionsCount > 4) {\n        return;\n    } // The 'More' btn will always be visible when there are more that 4 suggestions.\n\n    // Show 'More' btn if even one of the suggestions is hidden.\n    if (suggestionHidden) {\n        $suggestionBoxMoreBtn.removeClass('d-none');\n    } else {\n        $suggestionBoxMoreBtn.addClass('d-none');\n    }\n}\n\n/**\n * Renders suggested products.\n * @param {array} productList \n * @param {string} moreLink Link to a grid with suggested products.\n * @param {string} sectionTitle Suggestion box title.\n * @param {string} sectionMsg Suggestion box additional message.\n */\nfunction renderSuggestionBoxContents() {\n    var productList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var moreLink = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var sectionTitle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    var sectionMsg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n\n    var productListTemplate = '';\n\n    suggestionsCount = productList.length;\n\n    (0, _jquery2.default)('.suggestion-box-title').html(sectionTitle);\n    (0, _jquery2.default)('.suggestion-box-msg').html(sectionMsg);\n\n    var limitedProducts = productList.slice(0, 4); // Limit products to 4. \n\n    _jquery2.default.each(limitedProducts, function (index, product) {\n        productListTemplate += '<div class=\"align-middle text-center product ' + (index === 0 ? '' : 'd-none') + '\">\\n                <a href=\"' + product.detail_url + '\">                        \\n                    <img class=\"img-fluid\" src=\"' + product.img + '\" />\\n                </a>\\n            </div>';\n    });\n\n    (0, _jquery2.default)('.suggestion-box-products').html(productListTemplate);\n\n    (0, _jquery2.default)('.suggestion-box-products img').on('load', function () {\n        return debouncedFitSuggestions();\n    });\n\n    $suggestionBoxMoreBtn.attr('href', moreLink);\n\n    // Toggle 'more' link btn.\n    if (suggestionsCount > 4) {\n        $suggestionBoxMoreBtn.removeClass('d-none');\n    } else {\n        $suggestionBoxMoreBtn.addClass('d-none');\n    }\n}\n\n/**\n * Shows the suggestions box.\n */\nfunction openSuggestionBox() {\n    $suggestionBox.removeClass('hide-suggestion-box');\n}\n\n/**\n * Checks if any new products have been changed or removed from the cart. \n * Ignores quantity changes.\n * @param {object} newCartState \n * @returns {bool} changed flag\n */\nfunction productsChanged(newCartState) {\n    var changed = false;\n\n    // Check if new products have been added or removed\n    if (!oldCartState.items || oldCartState.items.length !== newCartState.items.length) {\n        oldCartState = _jquery2.default.extend(true, {}, newCartState);\n        return true; // State changed there is no need for further checks.\n    }\n\n    // Check if the products are the same (specyfically in the same spot in the list).\n    _jquery2.default.each(newCartState.items, function (index) {\n        if (newCartState.items[index].id !== oldCartState.items[index].id) {\n            changed = true;\n        }\n    });\n\n    oldCartState = _jquery2.default.extend(true, {}, newCartState);\n\n    return changed;\n}\n\n/**\n * Fits suggestion box between navbar and fixed footer by adjusting its height and position on the page.\n */\nfunction suggestionBoxResize() {\n    // Mobile view kicks in below 768px, resize is not needed.\n    if (window.innerWidth < mobileViewBreakpoint) {\n        $suggestionBoxContents.css('height', '').css('top', ''); // Clear calculated height and top values set outside mobile view.\n        return;\n    }\n\n    var navbarHeight = (0, _jquery2.default)('.navbar').outerHeight();\n\n    $suggestionBoxContents.css('top', navbarHeight) // Make space for the navbar.\n    // Calculate the height by always reseting the box to 100% height as multiple resizes may happen.\n    .css('height', $suggestionBoxContents.css('height', '100%').outerHeight() - ((0, _jquery2.default)('.fixed-bottom').outerHeight() + navbarHeight));\n}\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/cart/cart_product_suggestions.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/cart/index.js":
/*!********************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/cart/index.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(/*! ../shared/ui_blocker/ui_blocker */ \"../../src/mvfx_frontend/public/shared/ui_blocker/ui_blocker.js\");\n\n__webpack_require__(/*! ./product_quantity_spinner.js */ \"../../src/mvfx_frontend/public/cart/product_quantity_spinner.js\");\n\n__webpack_require__(/*! ./cart.js */ \"../../src/mvfx_frontend/public/cart/cart.js\");\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/cart/index.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/cart/product_quantity_spinner.js":
/*!***************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/cart/product_quantity_spinner.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _jquery = __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _cart_utils = __webpack_require__(/*! ../shared/cart_utils/cart_utils */ \"../../src/mvfx_frontend/public/shared/cart_utils/cart_utils.js\");\n\nvar _helper_utils = __webpack_require__(/*! ../../shared/helper_utils/helper_utils */ \"../../src/mvfx_frontend/shared/helper_utils/helper_utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * PRODUCT QUANTITY SPINNER\n * ========================\n * Manages product quantity change and updates product price.\n */\n\nvar dataKey = 'mvfx.productQuantitySpinner';\nvar maxQuantity = 99;\nvar minQuantity = 1;\n\nvar productQuantitySpinner = {\n    init: function init($productEl) {\n        this.$productEl = $productEl;\n        this.$decreaseQuantityBtn = (0, _jquery2.default)(this.$productEl.find('.decrease-quantity-btn'));\n        this.$increaseQuantityBtn = (0, _jquery2.default)(this.$productEl.find('.increase-quantity-btn'));\n        this.$productQuantityEl = this.$productEl.find('.product-quantity');\n        this.initialProductQuantity = parseInt(this.$productQuantityEl.text()); // Save the initial quantity for rever purposes in case price check request to API results in an error.\n        this.productId = this.$productEl.data().productQuantitySpinner;\n\n        this.debouncedPriceCheck = (0, _helper_utils.debounce)(this.priceCheck, 500); // Reduce the unnecessary price checks if they come in quick successions after one another.\n\n        this.setUpListeners();\n    },\n\n\n    /**\n     * Disables the spinner buttons when specified quantities are met.\n     * @param {integer} quantity Current product quantity.\n     * @param {bool} force Disable both spinner buttons no matter the current quantity.\n     */\n    spinnerDisabler: function spinnerDisabler(quantity, force) {\n\n        if (force) {\n            this.$decreaseQuantityBtn.attr('disabled', true);\n            this.$increaseQuantityBtn.attr('disabled', true);\n\n            return;\n        }\n\n        if (quantity < maxQuantity) {\n            this.$increaseQuantityBtn.attr('disabled', false);\n        }\n\n        if (quantity === maxQuantity) {\n            this.$increaseQuantityBtn.attr('disabled', true);\n        }\n\n        if (quantity === minQuantity) {\n            this.$decreaseQuantityBtn.attr('disabled', true);\n        }\n\n        if (quantity > minQuantity) {\n            this.$decreaseQuantityBtn.attr('disabled', false);\n        }\n    },\n    setUpListeners: function setUpListeners() {\n        var _this = this;\n\n        this.$decreaseQuantityBtn.add(this.$increaseQuantityBtn).on('click', function (e) {\n            // Get product quantity only from one element in case there are more in the row, otherwise the text of each product quantity node will be concated into one string.            \n            var quantity = parseInt((0, _jquery2.default)(_this.$productQuantityEl.get(0)).text());\n\n            if ((0, _jquery2.default)(e.currentTarget).hasClass('increase-quantity-btn')) {\n                quantity += 1;\n            } else {\n                quantity -= 1;\n            }\n\n            _this.$productQuantityEl.text(quantity); // Render current quantity.\n            _this.spinnerDisabler(quantity); // Check if spinner should be disabled.\n            _this.debouncedPriceCheck(quantity); // Send price check request.\n        });\n    },\n\n\n    /**\n     * Checks and updates the price of the product.\n     * @param {integer} productQuantity \n     */\n    priceCheck: function priceCheck(productQuantity) {\n        var _this2 = this;\n\n        this.spinnerDisabler(productQuantity, true); // Disable the spinner for the duration of the request.\n\n        (0, _cart_utils.changeProductQuantity)(this.productId, productQuantity).done(function () {\n            _this2.initialProductQuantity = productQuantity; // Set new initial quantity.\n            _this2.spinnerDisabler(productQuantity);\n        }).fail(function () {\n            _this2.$productQuantityEl.text(_this2.initialProductQuantity); // Revert to the initial quantity.\n            _this2.spinnerDisabler(_this2.initialProductQuantity);\n        });\n    }\n};\n\n(0, _jquery2.default)(document).ready(function () {\n\n    // Register the plugin for each product that should have the spinner.\n    (0, _jquery2.default)('[data-product-quantity-spinner]').each(function (index, el) {\n        var $el = (0, _jquery2.default)(el);\n        $el.data(dataKey, Object.create(productQuantitySpinner));\n        $el.data()[dataKey].init($el);\n    });\n});\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/cart/product_quantity_spinner.js?");

/***/ }),

/***/ "../../src/mvfx_frontend/public/shared/cart_utils/cart_utils.js":
/*!**************************************************************************!*\
  !*** /opt/mvfx/src/mvfx_frontend/public/shared/cart_utils/cart_utils.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.addProductToCart = addProductToCart;\nexports.changeProductQuantity = changeProductQuantity;\nexports.getCartState = getCartState;\nexports.markBundles = markBundles;\nexports.removeCartProduct = removeCartProduct;\n\nvar _jquery = __webpack_require__(/*! jquery */ \"../../../../node_modules/jquery/dist/jquery.js-exposed\");\n\nvar _jquery2 = _interopRequireDefault(_jquery);\n\nvar _helper_utils = __webpack_require__(/*! ../../../shared/helper_utils/helper_utils */ \"../../src/mvfx_frontend/shared/helper_utils/helper_utils.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * CART UTILS \n * ==========\n * Contains actions for adding, changing quantity and removing products from user cart.\n * Each action emits mvfx:cartRefreshed event with updated cart state that can be subscribed to.\n * \n * Confirmation modals are located in cart_confirmations.jinja2 template.\n */\n\nvar csrfToken = (0, _helper_utils.getCookie)('csrftoken');\n\n/**\n * Sends add product to cart request to API and processes the response.\n * @param {Integer} productId\n * @param {String} productTitle \n * @returns {Promise}\n */\nfunction addProductToCart(productId, productTitle) {\n    return _jquery2.default.post('/cart/add', { id: productId, csrfmiddlewaretoken: csrfToken }).done(function (response) {\n\n        if (response.already_in_cart) {\n            // Product is already in the cart, display appropriate modal.\n            (0, _jquery2.default)('#alreadyAddedProductName').text(productTitle);\n            (0, _jquery2.default)('#alreadyInCartMsg').modal('show');\n            return; // No need to continue further.\n        }\n\n        var addedProduct = response.items.find(function (item) {\n            return item.id === productId.toString();\n        }); // Pull more data about the product from cart data.\n\n        // Check if product is a part of a bundle.\n        if (addedProduct.required_product && !addedProduct.required_product.order && !addedProduct.required_product.already_in_cart) {\n            // Render added product name and the name of the parent product that is required by the bundle.\n            (0, _jquery2.default)('#dependentProductName').text(productTitle);\n            (0, _jquery2.default)('#dependencyProductName').text(response.items.find(function (item) {\n                return item.id === addedProduct.required_product.id;\n            }).title);\n            (0, _jquery2.default)('#twoProductsAddedToCartConfirm').modal('show');\n        } else {\n            // Show product added confirmation modal.\n            (0, _jquery2.default)('#addedProductName').text(productTitle);\n            (0, _jquery2.default)('#addedToCartConfirm').modal('show');\n\n            try {\n                gtag('event', 'add_to_cart', {\n                    \"items\": [{\n                        \"id\": '' + addedProduct.id,\n                        \"name\": '' + addedProduct.title,\n                        \"category\": '' + addedProduct.type,\n                        \"quantity\": '' + addedProduct.quantity,\n                        \"price\": '' + addedProduct.subtotal\n                    }]\n                });\n            } catch (e) {}\n\n            try {\n                fbq('track', 'AddToCart', {\n                    currency: 'USD',\n                    contents: [{\n                        quantity: '' + addedProduct.quantity,\n                        id: '' + addedProduct.id\n                    }],\n                    content_ids: '' + addedProduct.id\n                });\n            } catch (e) {}\n        }\n\n        cartRefreshedEventEmitter(response); // Emit updated cart state.  \n    });\n}\n\n/**\n * Sends quantity product change request to API.\n * @param {Integer} productId \n * @param {Integer} quantity \n * @returns {Promise}\n */\nfunction changeProductQuantity(productId, quantity) {\n    return _jquery2.default.post('/cart/change-quantity', { id: productId, quantity: quantity, csrfmiddlewaretoken: csrfToken }).done(function (response) {\n        return cartRefreshedEventEmitter(response);\n    }); // Emit updated cart state.  \n}\n\n/**\n * Fetches current state of the cart.\n * @returns {Promise}\n */\nfunction getCartState() {\n    return _jquery2.default.get('/cart').done(function (response) {\n        return cartRefreshedEventEmitter(response);\n    }); // Emit current cart state. \n}\n\n/**\n * Constructs border around product bundles and adds bundle tooltip with product dependency info.\n * @param {Object} cartState - current contents of the cart.\n * @param {String||Object} cartContainer - element that contains cart products.\n * @param {String||Object} bundleTooltipContainer - what element should contain the bundle tooltips.\n */\nfunction markBundles(cartState, cartContainer, bundleTooltipContainer) {\n\n    if (!cartState || cartState.items.length < 1) {\n        return;\n    } // Do nothing if cart is empty.\n\n    var $cartContainer = (0, _jquery2.default)(cartContainer);\n\n    // Groups of product ids and tooltip messages grouped by dependency product ids ex. { '2': [{ id: 4, message: 'product 4 requires product 2' }]}.    \n    var productBundles = {};\n\n    // Group products into bundles.\n    _jquery2.default.each(cartState.items, function (index, product) {\n\n        if (!product.required_product || product.required_product.order) {\n            return;\n        } // Do not bundle if product does not have dependencies or dependency was already bought by the user.\n\n        var dependencyProductId = product.required_product.id;\n\n        // Check if dependency product is in cart.\n        if (cartState.items.find(function (item) {\n            return item.id === product.required_product.id;\n        })) {\n            // Check if bundle was already added to the productBundles object.\n            if (productBundles[dependencyProductId]) {\n                productBundles[dependencyProductId].push({ id: product.id, message: product.required_product.message });\n            } else {\n                productBundles[dependencyProductId] = [{ id: product.id, message: product.required_product.message }];\n            }\n        } else {\n            // Check if dependency product is a part of a bundle product. There can be multiple products grouped into one and dependency might be among them \n            // - if that is the case, set the product bundle as a dependency product.\n            _jquery2.default.each(cartState.items, function (index, item) {\n\n                if (item.bundle) {\n                    var foundInBundle = item.bundle.find(function (bundleItem) {\n                        return bundleItem.toString() === dependencyProductId;\n                    }); // Search for required product in product bundle.\n\n                    if (foundInBundle) {\n\n                        // Check if bundle was already added to the productBundles object.\n                        if (productBundles[item.id]) {\n                            productBundles[item.id].push({ id: product.id, message: product.required_product.message });\n                        } else {\n                            productBundles[item.id] = [{ id: product.id, message: product.required_product.message }];\n                        }\n\n                        return false; // Break the loop. Need this as it is possible there can be more bundles the required product is a part of.\n                    }\n                }\n            });\n        }\n    });\n\n    $cartContainer.find('.bundle-icon').remove(); // Clear bundle tooltip.\n\n    // Clear bundle borders.\n    $cartContainer.find('.first').removeClass('first');\n    $cartContainer.find('.last').removeClass('last');\n    $cartContainer.find('.middle').removeClass('middle');\n\n    // Start marking the bundles.\n    _jquery2.default.each(productBundles, function (dependencyProductId, dependentProducts) {\n        var $dependencyEl = $cartContainer.find('[data-product-id=' + dependencyProductId + ']'); // Element of the product required by other products.        \n        var bundleHeight = $dependencyEl.outerHeight(); // Calculate row height for tooltip positioning purposes.\n        var tooltipMsg = '';\n\n        $dependencyEl.addClass('first'); // Dependency is always on top of the bundle.\n\n        (0, _jquery2.default)(dependentProducts).each(function (index, product) {\n            var $productEl = $cartContainer.find('[data-product-id=' + product.id + ']');\n\n            if (product.message) {\n                tooltipMsg += product.message + '</br>'; // Construct message for the tooltip.\n            }\n\n            // Mark the positions of products in the bundle.\n            if (dependentProducts.length === index + 1) {\n                $productEl.addClass('last'); // Product is last in the bundle mark it with \"last\" class.\n            } else {\n                $productEl.addClass('middle'); // Product is not last in the bundle mark it with \"middle\" class.\n            }\n\n            bundleHeight += $productEl.outerHeight(); // Add marked product element height to overall height of the bundle.\n        });\n\n        // Append tooltip to specified container.\n        $cartContainer.find('[data-product-id=' + dependencyProductId + '] ' + bundleTooltipContainer).append('\\n            <a class=\"bundle-icon\" data-toggle=\"tooltip\" data-placement=\"top\" data-html=\"true\" title=\"' + tooltipMsg + '\" style=\"top: ' + bundleHeight / 2 + 'px;\"></a>\\n        ');\n    });\n\n    $cartContainer.find('[data-toggle=\"tooltip\"]').tooltip({ container: cartContainer }); // Init tooltips.\n}\n\n/**\n * Sends product remove request to API, and processes the results. \n * @param {Integer} productId - Id of removed products.\n * @param {Bool} force - Delete the product even if it required by other products.\n * @returns {Promise}\n */\nfunction removeCartProduct(productId, force) {\n    var deferred = _jquery2.default.Deferred();\n\n    _jquery2.default.post('/cart/delete', { id: productId, csrfmiddlewaretoken: csrfToken, force: force }).done(function (response) {\n        try {\n            var title = (0, _jquery2.default)('[data-product-id=\"' + productId + '\"] img.img-fluid')[0].dataset.originalTitle;\n            gtag('event', 'remove_from_cart', {\n                \"items\": [{\n                    \"id\": '' + productId,\n                    \"name\": '' + title\n                }]\n            });\n        } catch (e) {}\n\n        cartRefreshedEventEmitter(response);\n        deferred.resolve(response);\n    }).fail(function (response) {\n        // Removed product is required by other products in the cart, confirmation by the user is required.\n        if (response.status === 403 && response.responseJSON.required_by) {\n            var $productRemoveConfirmBtn = (0, _jquery2.default)('#productRemoveConfirm'); // Product remove confirm button.\n            var data = response.responseJSON;\n\n            (0, _jquery2.default)('#dependentProductNumber').text(data.required_by.length); // Display number of products that require the removed product.\n            (0, _jquery2.default)('#removedProductName').text(data.name); // Display removed product name.\n\n            // Display required product remove confirm modal.\n            (0, _jquery2.default)('#removeFromCartConfirm').modal({\n                backdrop: \"static\",\n                keyboard: false\n            });\n\n            // Register click event on remove confirm btn.\n            $productRemoveConfirmBtn.on('click', function () {\n                $productRemoveConfirmBtn.add('.product-remove-cancel').off('click'); // Modal is dismissed unbind the click event.\n\n                // User accepted the remove process, force the product remove action.\n                removeCartProduct(productId, true).then(function (result) {\n                    return deferred.resolve(result);\n                }).fail(function (response) {\n                    return deferred.reject(response);\n                });\n            });\n\n            // Register click event on remove cancel btn.\n            (0, _jquery2.default)('.product-remove-cancel').on('click', function () {\n                $productRemoveConfirmBtn.add('.product-remove-cancel').off('click'); // Modal is dismissed unbind the click event.\n\n                deferred.reject(); // User cancelled the remove process.\n            });\n        } else {\n            deferred.reject(response); // Unexpected error occured.\n        }\n    });\n\n    return deferred; // Return promise.\n}\n\n///////////////// Private Functions ////////////////\n\n/**\n * Globaly emits signal that cart conatents have been updated.\n * @param {Object} cartState - current contents of the cart.\n */\nfunction cartRefreshedEventEmitter(cartState) {\n    (0, _jquery2.default)(document).triggerHandler(_jquery2.default.Event('mvfx:cartRefreshed', { cartState: cartState }));\n}\n\n//# sourceURL=webpack:////opt/mvfx/src/mvfx_frontend/public/shared/cart_utils/cart_utils.js?");

/***/ })

},[["../../src/mvfx_frontend/public/cart/index.js","runtime","commons"]]]);